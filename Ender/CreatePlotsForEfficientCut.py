import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os


def create_box_plot(ender, ender_fast, dataset):
    min_val = min(min(ender), min(ender_fast))
    max_val = max(max(ender), max(ender_fast))

    # Ustalenie liczby binów
    num_bins = 100  # Możesz zmienić na dowolną wartość, aby dostosować rozdzielczość histogramu

    # Tworzenie wspólnych binów
    bins = np.linspace(min_val, max_val, num_bins + 1)

    # Tworzenie wykresu
    plt.figure(figsize=(8, 6))
    plt.hist(ender, bins=bins, alpha=0.5, label='Baseline Version', edgecolor='black')
    plt.hist(ender_fast, bins=bins, alpha=0.5, label='Efficient Version', edgecolor='black')

    plt.title(f'Histogram of Time Required to Generate the Ensemble Using Different Approaches On Dataset {dataset}',
              wrap=True)
    plt.xlabel('Time[s]')
    plt.ylabel('Frequency')
    plt.legend()

    plt.savefig(os.path.join('plots', 'Efficient_Cuts', f"Histogram of times - {dataset}.png"))
    plt.show()


datasets = [
    "Apple quality",
    "Haberman",
    "Breast-c",
    "Spambase",
]
ender = [
    [31.07, 30.44, 30.24, 31.77, 30.8, 30.57, 30.99, 31.39, 32.57, 30.81, 30.02, 29.47, 30.16, 31.15, 30.58, 30.49,
     29.57, 30.04, 31.09, 30.59, 30.17, 29.38, 30.19, 32.19, 31.22, 28.32, 30.82, 29.23, 30.38, 29.67, 31.66, 30.13,
     30.61, 30.18, 29.74, 31.51, 29.73, 30.73, 31.33, 30.99, 30.9, 32.94, 30.87, 30.59, 30.38, 31.8, 30.44, 33, 32.41,
     30.56],
    [0.91, 1.02, 0.96, 1.0, 1.06, 0.95, 0.95, 0.93, 1.0, 1.07, 1.02, 1.01, 1.02, 0.96, 1.01, 0.96, 0.98, 0.98, 0.99,
     1.0, 0.96, 0.99, 0.88, 0.96, 1.04, 0.97, 1.01, 0.93, 0.97, 0.97, 1.0, 0.97, 0.92, 1.01, 0.98, 0.92, 0.92, 0.96,
     0.95, 1.1, 0.92, 1.01, 0.97, 0.92, 1.0, 0.96, 0.94, 1.0, 1.1, 0.98],
    [14.52, 13.24, 13.37, 14.65, 14.47, 13.78, 14.67, 14.4, 13.76, 13.94, 13.17, 13.54, 14.15, 14.74, 14.33, 14.18,
     13.12, 14.15, 14.26, 14.32, 14.23, 13.57, 14.48, 14.86, 14.96, 14.53, 13.3, 13.99, 13.81, 13.68, 14.15, 13.9,
     13.97, 13.96, 13.24, 14.44, 14.3, 14.31, 13.47, 12.76, 14.52, 13.95, 14.91, 13.14, 13.71, 14.33, 13.89, 13.74,
     13.35, 13.76],
    [119.09, 114.95, 114.16, 126.36, 125.45, 119.11, 109.19, 117.84, 118.38, 124.76, 120.13, 121.05, 115.46, 123.36,
     122.91, 118.33, 120.55, 121.96, 123.15, 130.2, 122.83, 116.59, 118.34, 124.68, 127.91, 102.52, 104.31, 112.68,
     104.08, 97.76, 95.69, 110.97, 108.39, 92.47, 103.28, 111.5, 111.25, 102.5, 104.0, 87.2, 107.93, 105.07, 101.0,
     102.3, 98.8, 106.84, 90.67, 98.93, 105.69, 104.32],
]
ender_fast = [
    [9.75, 9.87, 10.13, 10.2, 9.91, 9.75, 9.63, 9.92, 10.01, 9.74, 9.69, 9.56, 9.75, 9.99, 9.69, 9.72, 10.25, 10.1,
     10.24, 10.06, 9.78, 9.86, 10.02, 10.11, 10.69, 9.77, 9.86, 9.73, 9.95, 9.9, 10.32, 10.18, 9.99, 10.7, 10.59, 9.86,
     9.98, 10.29, 10.69, 9.77, 9.78, 9.98, 9.9, 9.92, 10.89, 10.36, 10.87, 10, 9.96, 9.83],
    [0.26, 0.26, 0.26, 0.28, 0.27, 0.27, 0.26, 0.26, 0.27, 0.28, 0.27, 0.27, 0.27, 0.27, 0.27, 0.26, 0.27, 0.26, 0.27,
     0.27, 0.27, 0.27, 0.27, 0.27, 0.28, 0.26, 0.27, 0.27, 0.27, 0.28, 0.28, 0.27, 0.27, 0.26, 0.25, 0.27, 0.28, 0.26,
     0.26, 0.27, 0.27, 0.27, 0.27, 0.27, 0.27, 0.27, 0.27, 0.27, 0.28, 0.27],
    [0.94, 0.92, 0.91, 0.93, 0.92, 0.89, 0.88, 0.93, 0.89, 0.94, 0.92, 0.91, 0.91, 0.89, 0.89, 0.91, 0.98, 0.93, 0.94,
     0.93, 0.92, 0.96, 0.96, 0.93, 0.92, 0.91, 0.91, 0.97, 0.95, 0.94, 0.91, 0.94, 0.91, 0.91, 0.91, 0.9, 0.88, 0.92,
     0.89, 0.93, 0.91, 0.9, 0.88, 0.9, 0.89, 0.9, 0.89, 0.89, 0.91, 0.91],
    [4.04, 4.09, 3.75, 3.61, 3.32, 3.95, 3.78, 4.24, 4.0, 3.32, 3.74, 3.52, 3.35, 3.34, 3.25, 3.19, 3.21, 3.04, 2.93,
     3.01, 3.22, 3.29, 3.12, 2.93, 3.04, 3.08, 3.08, 3.05, 3.02, 2.98, 3.12, 2.98, 3.12, 3.09, 3.09, 2.97, 2.96, 2.94,
     3.12, 2.83, 2.88, 3.0, 3.07, 3.01, 2.97, 3.24, 3.37, 3.45, 3.15, 3.48]
]

for i_dataset, dataset in enumerate(datasets):
    create_box_plot(ender[i_dataset], ender_fast[i_dataset], dataset)
